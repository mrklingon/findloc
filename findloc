#!/usr/bin/perl

#USES DATA FROM https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip

$DATALOC= "/LOCATIONWHERE/GeoLite2/IS";
$BEVERBOSE = 1;

if (!defined ($ARGV[0])) { 
    printf "\n";
    printf "findloc - find geographic IP location\n";
    printf "\n";
    printf "USAGE:   findloc [-v (default)]IP-Address [IP-Address [IP-Address...]]\n";
    printf "           report IP: country and country-code\n\n";
    printf "         findLOC.pl -r IP-Address [IP-Address [IP-Address...]]\n";
    printf "           just report country code: IP\n\n";
    printf "\n";
}

foreach $ip (@ARGV){

    $BLANDIP = $ip;

    if ($ip =~ /-r/){
        $BEVERBOSE = 0;
    }else {
    if ($ip =~ /-v/){
        $BEVERBOSE = 1;
    } else {
        &findIP($BLANDIP,$BEVERBOSE);
    }
    }
}



sub findIP {
    my ($IP,$VERBOSE)=@_;

    open IO, "cat $DATALOC/GeoLite2-Country-Blocks-IPv4.csv|";
    #  open IO, "cat GEO-IP.test|";

    $IPnum = &ip2int($IP);
    #  printf "Looking for $IP ($IPnum)\n";
    $throwawy = <IO>;
    while (<IO>){
    chomp;
    ($Network,$Geoname,$Geoname2,$secondNum,$Ccode,$Country)=split (/,/);
    #    printf "$Network,$Geoname,$Geoname2,$secondNum,$Ccode,$Country\n";
    ($firstIP,$block) = split(/\//,$Network);
    $firstNum = &ip2int($firstIP);
    $secondNum = $firstNum + 2 ** (32 - $block);

    if (($IPnum>=$firstNum) && ($IPnum<=$secondNum)){
        #we found match
        open CC, "grep $Geoname $DATALOC/GeoLite2-Country-Locations-en.csv|";
        $CCode = <CC>;
        chomp $CCode;
        ($code,$language,$CCont,$Cont,$CC,$Country)=split(/,/,$CCode);
        if ($VERBOSE){
        printf "$IP is from $Country, ($CC), in $Cont\n";
        }else{
        printf "$CC:$IP\n";
        }
        close IO;
        return;
    }
    }
}


#########################################
# ip2int change IP to an integer
#

sub ip2int {
    my($ip) = shift;
    my($number) = 0;

    $number = $1 * 256 * 256 * 256 + $2 * 256 * 256 + $3 * 256 + $4
    if $ip =~ /^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/;
    return $number;
}





##########################################
# int2ip - change int back to an IP
#

sub int2ip {
    my($number) = shift;
    my($ip);

    $ip = ($number & 0xff000000) / (256 * 256 * 256);
    $ip .= "." . ($number & 0x00ff0000) / (256 * 256);
    $ip .= "." . ($number & 0x0000ff00) / (256);
    $ip .= "." . ($number & 0x000000ff);
    return $ip;
}

