#!/usr/bin/perl

#USES DATA FROM http://geolite.maxmind.com/download/geoip/database/
$DATALOC= "/location/of/data"; #customize to location used.
$BEVERBOSE = 1;

if (!defined ($ARGV[0])) {
printf "\n";
printf "findloc - find geographic IP location\n";
printf "\n";
printf "USAGE:   findloc [-v (default)]IP-Address [IP-Address [IP-Address...]]\n";
printf "           report IP: country and country-code\n\n";
printf "         findLOC.pl -r IP-Address [IP-Address [IP-Address...]]\n";
printf "           just report country code: IP\n\n";
printf "\n";
}

foreach $ip (@ARGV){

    $BLANDIP = $ip;

    if ($ip =~ /-r/){
        $BEVERBOSE = 0;
    }else {
    if ($ip =~ /-v/){
        $BEVERBOSE = 1;
    } else {
       &findIP($BLANDIP,$BEVERBOSE);
      }
   }
}



sub findIP {
  my ($IP,$VERBOSE)=@_;

  open IO, "cat $DATALOC/GEO-IP.txt|";
#  open IO, "cat GEO-IP.test|";

  $IPnum = &ip2int($IP);
#  printf "Looking for $IP ($IPnum)\n";
  while (<IO>){
    chomp;
    ($firstIP,$secondIP,$firstNum,$secondNum,$Ccode,$Country)=split (/\t/);
#    printf "$firstIP,$secondIP,$firstNum,$secondNum,$Ccode,$Country\n";
    if (($IPnum>=$firstNum) && ($IPnum<=$secondNum)){
      #we found match
    if ($VERBOSE){
          printf "$IP is from $Country ($Ccode)\n";
      }else{
          printf "$Ccode:$IP\n";
     }
      close IO;
      return;
    }
  }
}


#########################################
# ip2int change IP to an integer
#

sub ip2int {
    my($ip) = shift;
    my($number) = 0;

    $number = $1 * 256 * 256 * 256 + $2 * 256 * 256 + $3 * 256 + $4
    if $ip =~ /^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/;
    return $number;
}





##########################################
# int2ip - change int back to an IP
#

sub int2ip {
    my($number) = shift;
    my($ip);

    $ip = ($number & 0xff000000) / (256 * 256 * 256);
    $ip .= "." . ($number & 0x00ff0000) / (256 * 256);
    $ip .= "." . ($number & 0x0000ff00) / (256);
    $ip .= "." . ($number & 0x000000ff);
    return $ip;
}


